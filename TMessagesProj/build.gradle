plugins {
    id 'kotlin-android'
    id 'com.android.application'
    id 'com.google.gms.google-services'
    id 'com.google.android.libraries.mapsplatform.secrets-gradle-plugin'
}

configurations {
    compile.exclude module: 'support-v4'
}

configurations.all {
    exclude group: 'com.google.firebase', module: 'firebase-core'
    exclude group: 'androidx.recyclerview', module: 'recyclerview'
}

dependencies {
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.palette:palette-ktx:1.0.0'
    implementation 'androidx.exifinterface:exifinterface:1.3.3'
    implementation 'androidx.dynamicanimation:dynamicanimation:1.0.0'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation "androidx.sharetarget:sharetarget:1.2.0-rc01"
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'com.google.android.gms:play-services-measurement:20.1.2'

    compileOnly 'org.checkerframework:checker-qual:3.21.3'
    compileOnly 'org.checkerframework:checker-compat-qual:2.5.5'
    implementation 'com.google.firebase:firebase-messaging:23.0.3'
    implementation 'com.google.firebase:firebase-config:21.0.2'
    implementation 'com.google.firebase:firebase-datatransport:18.1.2'
    implementation 'com.google.firebase:firebase-appindexing:20.0.0'
    implementation 'com.google.android.gms:play-services-maps:18.0.2'
    implementation 'com.google.android.gms:play-services-auth:20.2.0'
    implementation 'com.google.android.gms:play-services-auth-api-phone:18.0.1'
    implementation 'com.google.android.gms:play-services-vision:20.1.3'
    implementation 'com.google.android.gms:play-services-wearable:17.1.0'
    implementation 'com.google.android.gms:play-services-location:19.0.1'
    implementation 'com.google.android.gms:play-services-wallet:19.1.0'
    implementation 'com.googlecode.mp4parser:isoparser:1.0.6'
    implementation 'com.stripe:stripe-android:2.0.2'
    implementation 'com.google.mlkit:language-id:17.0.3'
    implementation files('libs/libgsaverification-client.aar')

    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.6.21"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.1"
}

ext.abiCodes = ['armeabi-v7a':1, 'arm64-v8a':2, x86:3, 'x86_64':4, 'universal':9]

static def getAppID() {
    Properties properties = new Properties()
    properties.load(new FileInputStream("./API_KEYS"))

    return properties.get("APP_ID")
}

static def getAppHash() {
    Properties properties = new Properties()
    properties.load(new FileInputStream("./API_KEYS"))

    return "\"" + properties.get("APP_HASH") + "\""
}

static def getSmsHash() {
    Properties properties = new Properties()
    properties.load(new FileInputStream("./API_KEYS"))

    return "\"" + properties.get("SMS_HASH") + "\""
}

static def getGoogleMapsAPI() {
    Properties properties = new Properties()
    properties.load(new FileInputStream("./API_KEYS"))

    return "\"" + properties.get("MAPS_V2_API") + "\""
}

android {
    compileSdkVersion 32
    buildToolsVersion '32.1.0-rc1'
    ndkVersion "21.4.7075529"

    defaultConfig.applicationId = "exterax.messenger"

    sourceSets.main.jniLibs.srcDirs = ['./jni/']

    externalNativeBuild {
        cmake {
            path 'jni/CMakeLists.txt'
        }
    }

    lint {
        checkReleaseBuilds false
        disable 'MissingTranslation', 'ExtraTranslation', 'BlockedPrivateApi'
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        resources {
            excludes += '**'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11

        coreLibraryDesugaringEnabled true
    }

    Properties signingProperties = new Properties()
    if (project.rootProject.file('signing.properties').exists()) {
        signingProperties.load(project.rootProject.file('signing.properties').newDataInputStream())
    }

    signingConfigs {
        if (signingProperties.getProperty("storeFile") != null) {
            sign {
                storeFile file(signingProperties.getProperty("storeFile"))
                storePassword signingProperties.getProperty("storePassword")
                keyAlias signingProperties.getProperty("keyAlias")
                keyPassword signingProperties.getProperty("keyPassword")
            }
        }
    }

    buildTypes {
        release {
            debuggable false
            jniDebuggable false
            if (signingProperties.getProperty("storeFile") != null) {
                signingConfig signingConfigs.sign
            }
            minifyEnabled true
            shrinkResources true
            multiDexEnabled true
            zipAlignEnabled true
            proguardFiles 'proguard-rules.pro'

            resValue "string", "AppNameX", "@string/exteraAppName"
            manifestPlaceholders = [
                    appIcon: "@mipmap/ic_launcher"
            ]
        }
        debug {
            debuggable true
            jniDebuggable true
            if (signingProperties.getProperty("storeFile") != null) {
                signingConfig signingConfigs.sign
            }
            minifyEnabled true
            shrinkResources true
            multiDexEnabled true
            zipAlignEnabled true
            proguardFiles 'proguard-rules.pro'
            buildConfigField 'boolean', 'DEBUG_VERSION', 'true'

            resValue "string", "AppNameX", "@string/exteraAppNameBeta"
            manifestPlaceholders = [
                    appIcon: "@mipmap/ic_launcher_beta"
            ]
        }
    }

    defaultConfig.versionCode = 2638

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def abi = output.getFilter('ABI')
            if (abi == null) abi = 'universal'

            def date = new Date()
            def formattedDate = date.format('MMddyyyy')

            outputFileName = "exterax-${formattedDate}-${abi}.apk"
            def abiVersionCode = project.ext.abiCodes.get(abi)
            output.versionCodeOverride = defaultConfig.versionCode * 10 + abiVersionCode
        }
    }

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 32
        versionName "8.7.4"

        // Obtain your own keys at:
        // Telegram: https://core.telegram.org/api/obtaining_api_id
        buildConfigField 'int', 'APP_ID', getAppID()
        buildConfigField 'String', 'APP_HASH', getAppHash()
        buildConfigField 'String', 'SMS_HASH', getSmsHash()
        // Google Console: https://console.cloud.google.com/google/maps-apis/credentials
        resValue 'string', 'MAPS_V2_API', getGoogleMapsAPI()

        externalNativeBuild {
            cmake {
                version '3.22.1'
                arguments '-DANDROID_STL=c++_static', '-DANDROID_PLATFORM=android-21'
            }
        }
    }
    bundle {
        language {
            enableSplit = false
        }
    }

    splits.abi {
        enable true
        universalApk true
    }

    dependenciesInfo.includeInApk false
}
